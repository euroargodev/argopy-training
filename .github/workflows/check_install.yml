name: Install Method 1 (pinned versions)

on:
  push:
    branches:
      - main
  schedule:
    - cron: "30 0 * * *" # Daily “At 00:30” UTC
  workflow_dispatch: # allows you to trigger the workflow run manually
  pull_request:
    branches-ignore:
      - 'dependabot*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  id-token: write
  contents: read

jobs:

  Check:

    name: Py${{ matrix.python-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    continue-on-error: False
    strategy:
      max-parallel: 12
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]

    steps:
      - uses: actions/checkout@v5

      - name: Set environment variables
        run: |
          echo "CONDA_ENV_FILE=how_to_install/argopy-training.yml" >> $GITHUB_ENV
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_ENV
          echo "LOG_FILE=Pinned-Py${{matrix.python-version}}-${{matrix.os}}.log" >> $GITHUB_ENV

      - name: Create environment with Micromamba ${{ matrix.python-version }}
        uses: mamba-org/setup-micromamba@v2
        with:
          micromamba-version: '2.0.5-0'
          environment-name: argopy-training
          environment-file: ${{ env.CONDA_ENV_FILE }}
          init-shell: bash
          cache-environment: false
          create-args: >-
            python=${{matrix.python-version}}

      - name: Version info
        run: |
          micromamba info
          micromamba list

      - name: Test install
        run: |
          python -c "import argopy; print(argopy.show_versions())"
          python -c "import argopy; assert argopy.DataFetcher().float(1901393).data.argo.N_POINTS == 25527"
          python -c "import argopy; assert argopy.DataFetcher(src='gdac', mode='expert').profile(5903248, 34).data.argo.N_POINTS == 70"
          python -c "import argopy; assert argopy.DataFetcher(src='argovis').region([-20, -16., 0, 10, 0, 100., '20250801','20250901']).data.argo.N_LEVELS == 172"
